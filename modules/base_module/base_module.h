#ifndef BASE_MODULE_H
#define BASE_MODULE_H

#include "esp_err.h" // Для типів помилок ESP-IDF
#include "cJSON.h"   // Для роботи з JSON у get_ui_schema

// Включаємо заголовки основних компонентів ядра, які може використовувати модуль
// Хоча краще, щоб модулі включали їх у своїх .cpp файлах за потреби,
// тут можна залишити для зручності, якщо більшість модулів їх потребують.
// #include "core/config.h"
// #include "core/shared_state.h"
// #include "core/event_bus.h"
// #include "core/webserver.h"

// Базовий клас для всіх модулів системи ModuChill
class BaseModule {
public:
    // Віртуальний деструктор є обов'язковим для базових класів з віртуальними функціями
    virtual ~BaseModule() = default;

    /**
     * @brief Повертає унікальне рядкове ім'я модуля.
     *
     * Це ім'я використовується для шляхів у конфігурації (/ім'я_модуля/параметр),
     * шляхів API (/api/ім'я_модуля/...), ключів у SharedState тощо.
     * Ім'я має бути статичним для типу модуля.
     *
     * @return const char* Вказівник на рядок з іменем модуля. Не повинен бути nullptr або порожнім.
     */
    virtual const char* getName() const = 0;

    /**
     * @brief Ініціалізує модуль.
     *
     * Викликається один раз при старті системи після реєстрації модуля
     * та перевірки його активації (Kconfig/Runtime).
     * Тут модуль може читати свою конфігурацію (через ConfigLoader::get),
     * підписуватись на події (EventBus::subscribe), реєструвати API ендпоінти
     * (WebServer::register_api), ініціалізувати апаратне забезпечення тощо.
     *
     * @return esp_err_t ESP_OK при успішній ініціалізації, інакше код помилки ESP-IDF.
     * При помилці модуль не буде додано до списку активних.
     */
    virtual esp_err_t init() = 0;

    /**
     * @brief Періодичний виклик для оновлення логіки модуля.
     *
     * Викликається з головного циклу системи (через ModuleManager::tick_all)
     * для всіх активних модулів. Модулі, яким не потрібні періодичні оновлення,
     * можуть не перевизначати цей метод (дефолтна реалізація порожня).
     */
    virtual void tick() {}

    /**
     * @brief Зупинка модуля та звільнення ресурсів.
     *
     * Викликається перед вимкненням системи або при деактивації модуля
     * (через ModuleManager::stop_all). Модуль має звільнити захоплені ресурси
     * (GPIO, таймери, пам'ять), відписатись від подій тощо.
     * Дефолтна реалізація порожня.
     */
    virtual void stop() {}

    /**
     * @brief Надає JSON-опис UI елементів для цього модуля.
     *
     * Викликається компонентом UISchemaBuilder для генерації загальної схеми UI.
     * Модуль має додати свої елементи (лейбли, поля вводу, кнопки тощо)
     * до наданого батьківського об'єкта cJSON.
     * Дивіться документацію на UISchemaBuilder та формат схеми.
     *
     * @param module_schema_parent Вказівник на об'єкт cJSON, куди модуль
     * має додати свою UI-схему (наприклад, поля "config", "status", "ui").
     * @return esp_err_t ESP_OK, якщо схема додана, ESP_ERR_NOT_SUPPORTED, якщо модуль
     * не надає схему (дефолтна поведінка), або інший код помилки.
     */
    virtual esp_err_t get_ui_schema(cJSON* module_schema_parent) {
        // Дефолтна реалізація: модуль не має UI
        // Можна додати якийсь маркер, якщо потрібно
         if (module_schema_parent) {
             // cJSON_AddStringToObject(module_schema_parent, "ui_support", "none");
         }
        return ESP_ERR_NOT_SUPPORTED;
    }
};

#endif // BASE_MODULE_H